# This is an example of Rhea. For an interim syntax highlighter I'm using a Ruby one.
# Here we go!

print "Hello, world!" # This prints out Hello, world!
print "Hello, " + 24 + 25 + " World!" # Because of how parsing works, it will print "Hello, 2425 World!"
print "Hello, " + (24 + 25) + " World!" # This one prints "Hello, 49 World!"

# Let's make a function!
def printTwice x : String = do
  2 times do
    print x
  end
end

# Or, the more idiomatic
def printTwice x : String = 2 times print x
# Which does the same thing.

# Classes work similarly:
def MyClass = class
  def myVariable = 3
  def myFunction = fun print myVariable
  def myOtherFunction = fun myVariable += 1
end
# Yes, variables work like that.

# Let's use that class!
def myVariable = MyClass # Out of scope, so myVariable works as a name. This _is_ an initializer. To use the type, use `type myClass`
myVariable myFunction # Prints 3
myVariable myOtherFunction
myVariable myFunction # Prints 4

# So, how are these function calls working?
# Well a function call goes:
# [subject] <function> [object1] [object2] ... [objectN]
# So, if we make a type with a + function:
def Vec3 x : Float, y : Float, z : Float = class
  def + = fun (other: Vec3) Vec3 x + other.x, y + other.y, z + other.z
  def toString = fun "x: " + x + ", y: " + y + ", z: " + z # Called by print
end
def myVec3 = Vec3 1, 2, 3
def myOtherVec3 = Vec3 2, 3, 4
print myVec3 + myOtherVec3 # Prints: "x: 3, y: 5, z: 7"
# So, that's how operators work. Pretty elegant.

# But the defining feature of Rhea is its GPU-running ability, and thus paralellism. So how do we do that?
# Well, let's take something where we do the same thing over and over again, like making an image:
def result = Image 1024 1024 # We're using the Image class from the standard library. To use it you'll need to import rhea.graphics.Image.
for 1024, 1024 do x, y
    result[x, y] = rand seed=(x * y) # Random float between 0 and 1, based on x and y
end
# This is something we could paralellize easily. We can use Rhea's built-in parallel for loop:
def result = Image 1024 1024 # We're using the Image class from the standard library. To use it you'll need to import rhea.graphics.Image.
cpu 1024, 1024 do x, y
    result[x, y] = rand seed=(x * y) # Random float between 0 and 1, based on x and y
end
# Just change `cpu` to `gpu` to do it on the GPU:
def result = Image 1024 1024 # We're using the Image class from the standard library. To use it you'll need to import rhea.graphics.Image.
gpu 1024, 1024 do x, y
    result[x, y] = rand seed=(x * y) # Random float between 0 and 1, based on x and y
end
